@page "/"
@using AbertaApi.Models
@using AbertaBackOffice.Services
@using AbertaBackOffice.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore.Migrations
@inject BookService Service
@inject ImageService ImageService
@inject IConfiguration config
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage BrowserStorage
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@attribute [Authorize]

<PageTitle>- Livraria Aberta</PageTitle>
<div class="flex-column mb-5">
    <h1 class="d-flex justify-content-center p-5 text-white">View all books</h1>

    <EditForm EditContext="editContext" OnSubmit="Submit" FormName="Search">
        <div class="input-group" style="display: flex; justify-content: center;">
            <InputText style="color: white; max-width: 400px; margin-right: 1rem; background: #ffffff1f;" placeholder="Search... Title / Author / ISBN"
                       @bind-Value="_terms"
                       class="form-control"/>
            <div class="input-group-append">
                <button style="background: #fdec00; color: black;" class="btn btn-outline-secondary" type="submit">Search</button>
            </div>
        </div>
    </EditForm>
</div>

<div class="row">
    <div class="col-1 p-0"><button class="btn-tab @(_isActive ? "btn-active" : "")" @onclick="SetActiveTab">Active</button></div>
    <div class="col-1 p-0"><button class="btn-tab @(_isActive ? "" : "btn-active")" @onclick="SetInactiveTab">Inactive</button></div>
</div>

<table class="table table-bordered">
    <thead>
    <tr class="">
        <th scope="col" class="text-white p-4">Picture</th>
        <th scope="col" class="text-white p-4">ISBN</th>
        <th scope="col" class="text-white p-4">Title</th>
        <th scope="col" class="text-white p-4">Author</th>
        <th scope="col" class="text-white p-4">Price</th>
        <th scope="col" class="text-white p-4">Stock</th>
    </tr>
    </thead>
    <tbody class="table-body">
    @foreach (var book in Books)
    {
        <tr class="table-row t-paint" @onclick="() => { EditBookRoute(book.Isbn); }">
            <td class="p-4 cell">
                <object style="height: auto; max-width: 100px;" data="@(config.GetValue<string>("AbertaApi:ImageUrl") + book.Isbn + "-c")" type="image/jpg">
                    <img style="height: auto; max-width: 100px;" src="./notfound.jpg" alt="Picture of the book">
                </object>
            </td>
            <td class="p-4 cell">@book.Isbn</td>
            <td class="p-4 cell">@book.Title</td>
            <td class="p-4 cell">@book.Author</td>
            <td class="p-4 cell">@book.Price€</td>
            <td class="p-4 cell">@book.Stock</td>
        </tr>
    }
    </tbody>
</table>

@if (Books.Count == 0)
{
    <p class="text-white">No books were found @(_terms != "" ? " for " + _terms : "")</p>
}

<div class="row p-5 justify-content-center">
    <div class="col-1">
        <button class="btn btn-warning" @onclick="@Back">
            @("<")
        </button>

    </div>
    <div class="col-1 text-white">
        <label>@_page</label>

    </div>
    <div class="col-1">
        <button class="btn btn-warning" @onclick="@Next">
            @(">")
        </button>

    </div>

</div>

@code {
    private EditContext? editContext;
    
    [SupplyParameterFromForm] private string _terms { get; set; } = "";
    private int _page = 1;
    private bool _isActive = true;

    private List<Book> Books = [];
    
    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(_terms);
        
        var terms = await BrowserStorage.GetAsync<string>("terms");
        var page = await BrowserStorage.GetAsync<int>("page");
        var isActive = await BrowserStorage.GetAsync<bool>("isActive");

        var response = new ResultWrapper<List<Book>>();
        if (terms.Success && page.Success && isActive.Success)
        {
            _isActive = isActive.Value;
            _page = page.Value;
            _terms = terms.Value;
            
            response = await Service.GetBooksSearch(terms.Value, 25, page.Value, isActive.Value);
        }
        else
        {
            response = await Service.GetBooksSearch("", 25, _page, _isActive);
            await BrowserStorage.SetAsync("page", _page);
            await BrowserStorage.SetAsync("terms", "");
            
            await BrowserStorage.SetAsync("isActive", _isActive);
        }

        if (response.IsSuccessful)
            Books = response.Data;
    }

    private void EditBookRoute(string isbn)
    {
        var path = config.GetValue<string>("AbertaApi:BookUrl") + isbn;
        NavigationManager.NavigateTo(path);
    }

    private async Task Submit()
    {
        _page = 1;
        await BrowserStorage.SetAsync("page", _page);
        await BrowserStorage.SetAsync("terms", _terms);

        var response = await Service.GetBooksSearch(_terms, 25, _page, _isActive);
        Books = response.IsSuccessful ? response.Data : [];
    }

    private async Task Next()
    {
        _page++;
        await BrowserStorage.SetAsync("page", _page);

        await SearchResults();
    }

    private async Task Back()
    {
        _page--;
        await BrowserStorage.SetAsync("page", _page);

        await SearchResults();
    }

    private async Task SetActiveTab()
    {
        _isActive = true;
        await BrowserStorage.SetAsync("isActive", _isActive);
        
        await Submit();
    }
    
    private async Task SetInactiveTab()
    {
        _isActive = false;
        await BrowserStorage.SetAsync("isActive", _isActive);
        
        await Submit();
    }

    private async Task SearchResults()
    {
        var response = await Service.GetBooksSearch(_terms, 25, _page, _isActive);

        if (response.IsSuccessful)
            Books = response.Data;
    }

}